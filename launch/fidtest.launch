<launch>
    <!-- namespace -->
    <arg name="ns" default=""/>
    <param name="redis_ns" value="$(arg ns)"/>
<!-- Gazebo world-->
    <arg name="world" default="stage_3"/>
    <include file="$(find turtlebot3_gazebo)/launch/turtlebot3_$(arg world).launch">
        <arg name="model" value="waffle_pi"/>
    </include>
    
    <!-- Aruco -->
    <arg name="camera" default="camera/rgb"/>
    <arg name="image" default="image_raw"/>
    <arg name="transport" default="compressed"/>
    <arg name="fiducial_len" default="0.14"/>
    <arg name="dictionary" default="7"/>
    <arg name="cam_topic" default="/camera/rgb/image_raw/compressed"/>

    <!-- fid model-->
    <node name="single_fiducial" pkg="gazebo_fiducial_spawner" type="single_spawner.py" args=" 1 -dict $(arg dictionary) -x 0.4 -z 0.1 -P -1.57" output="screen"/>


    <!--  Run the throttled feed for the Aruco node-->
    <node pkg="topic_tools" type="throttle" name="cam_throttle" args="messages $(arg cam_topic) 2" />

    <!-- Run the aruco_detect node -->
    

    <node pkg="aruco_detect" name="aruco_detect"
        type="aruco_detect" respawn="false">
        <param name="image_transport" value="$(arg transport)"/>
        <param name="publish_images" value="true" />
        <param name="fiducial_len" value="$(arg fiducial_len)"/>
        <param name="dictionary" value="$(arg dictionary)"/>
        <param name="do_pose_estimation" value="true"/>
        <remap from="/camera/compressed"
            to="$(arg camera)/$(arg image)/$(arg transport)_throttle"/>
        <remap from="/camera_info" to="$(arg camera)/camera_info"/>
        <remap from="/fiducial_transforms" to="/fiducial_transforms" />
    </node>

    <!-- Fid slam-->
    <!--
    <include file="$(find fiducial_slam)/launch/fiducial_slam.launch">
        <arg name="camera" value="$(arg cam_topic)"/>
        <arg name="map_frame" value="fid_map"/>
    </include>
    -->
    <!-- bridge -->
    <node pkg="robot_services" type="fiducial_bridge.py" name="fiducial_bridge" output="screen">
        <param name="cam_frame" value="camera_rgb_optical_frame"/>
        <param name="dict" value="$(arg dictionary)"/>
    </node>
    <!-- cemara tf (for waffle pi)-->
    <node pkg="tf" type="static_transform_publisher" name="camera_to_base" args="0.076 0 0.013 -1.57 0 -1.57 /base_link /camera_rgb_optical_frame 100" />
    <node pkg="tf" type="static_transform_publisher" name="base_to_base" args="0 0 0.01 0 0 0 /base_footprint /base_link 100" />
</launch>